<?php
	/*
	 * Developer   : H4x0
	 * Script Name : GrepLib
	 * Licence     : Public Domain
	 * Source      : http://crypt.noip.me
	 * 
	 * If you use this software in your project I would appreciate a 
	 * link back to my blog (the "Source" url) in the source somewhere, 
	 * it helps encourage me to develop more stuff.
	 *
	 * If you like this script, let me know on my blog! I am always open 
	 * to reviews, criticism (good or bad), and suggestions.
	 *
	 * This script is designed to pull data from the Grepolis API
	 * which stores its public data as text files as described on the 
	 * Grepolis Forum http://goo.gl/kakIEM it then organizes that data 
	 * into a 2-dimension PHP array() and inserts it into a database.
	 *
	 * This is designed to be run via command line or Cron job.
	 */
	require_once("Greplib.Settings");
	
	/*
	 * Clear all tables in database to prep for latest 
	 * update. If the tables are not dumped old records 
	 * will stay in the database.
	 */
	function ClearDatabase() {
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		$DB_C->query("TRUNCATE TABLE Players;");
		$DB_C->query("TRUNCATE TABLE Alliances;");
		$DB_C->query("TRUNCATE TABLE Towns;");
		$DB_C->query("TRUNCATE TABLE Islands;");
		$DB_C->query("TRUNCATE TABLE Conquers;");
		$DB_C->close();
	}
	
	/*
	 * Helper function that checks if a string is empty
	 * and if the processed string is empty it is replaced 
	 * with the integer 0 for database compatibility.
	 */
	function CheckClear($STR) {
		if (trim($STR) == "") {
			return 0;
		} return $STR;
	}
	
	/*
	 * Runs all Read/Update functions for a complete 
	 * database update.
	 */
	function Process_All() {
		Players();
		Alliances();
		Towns();
		Islands();
		Conquers();
	}
	
	function Players() {
		print("Processing  Players\r");
		
		$start_time = microtime(true);
		$data_url = "http://" . WORLD_IDENTIFIER . ".grepolis.com/data/players.txt";
		
		if (USE_LOCAL_PLAYERS) {
			$data_url = LOCAL_PLAYERS;
		}
		
		$datafile = file($data_url);
		
		if(!is_array($datafile)) die("File could not be opened");
	
		$BUILT = array();
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		
		if (SCRIPT_AUTO_TRUNCATE) {
			$DB_C->query("TRUNCATE TABLE Players;");
		}
		
		foreach($datafile as $datum) {
            list(
				$id, 
				$name, 
				$alliance_id, 
				$points, 
				$rank, 
				$towns
			) = explode(',', $datum);
			
			$id          = CheckClear($id);
			$name        = CheckClear($name);
			$alliance_id = CheckClear($alliance_id);
			$points      = CheckClear($points);
			$rank        = CheckClear($rank);
			$towns       = CheckClear($towns);
			
			array_push($BUILT, array(
				$id,
				$name,
				$alliance_id,
				$points,
				$rank,
				$towns
			));
		}
		
		foreach ($BUILT as $VAL) {
			$DB_Q = "INSERT INTO Players (id, name, alliance_id, points, rank, towns) VALUES('" . $VAL[0] . "', '" . $VAL[1] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "') ON DUPLICATE KEY UPDATE name='" . $VAL[1] . "', alliance_id='" . $VAL[2] . "', points='" . $VAL[3] . "', rank='" . $VAL[4] . "', towns='" . $VAL[5] . "'";
			
			if (!DEBUG_MODE) {
				if (!$DB_R = $DB_C->query($DB_Q)) {
					die('There was an error running the query [' . $DB_C->error . ']');
				}
			}
		}
		
		$DB_C->close();
		$end_time = microtime(true);
		$EX_TIME = sprintf("%05.2f", round($end_time - $start_time, 2));
		print("Processing  Players           ...Done! [$EX_TIME]\n");
	}
	
	function Alliances() {
		print("Processing  Alliances\r");
		
		$start_time = microtime(true);
		$data_url = "http://" . WORLD_IDENTIFIER . ".grepolis.com/data/alliances.txt";
		
		if (USE_LOCAL_ALLIANCES) {
			$data_url = LOCAL_ALLIANCES;
		}
		
		$datafile = file($data_url);
		
		if(!is_array($datafile)) die("File could not be opened");
	
		$BUILT = array();
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		
		if (SCRIPT_AUTO_TRUNCATE) {
			$DB_C->query("TRUNCATE TABLE Alliances;");
		}
		
		foreach($datafile as $datum) {
            list(
				$id, 
				$name, 
				$points, 
				$towns, 
				$members, 
				$rank
			) = explode(',', $datum);
			
			$id          = CheckClear($id);
			$name        = CheckClear($name);
			$points      = CheckClear($points);
			$towns       = CheckClear($towns);
			$members     = CheckClear($members);
			$rank        = CheckClear($rank);
			
			array_push($BUILT, array(
				$id,
				$name,
				$points,
				$towns,
				$members,
				$rank
			));
        }
		
		foreach ($BUILT as $VAL) {
			$DB_Q = "INSERT INTO Alliances (id, name, points, towns, members, rank) VALUES('" . $VAL[0] . "', '" . $VAL[1] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "') ON DUPLICATE KEY UPDATE name='" . $VAL[1] . "', points='" . $VAL[2] . "', towns='" . $VAL[3] . "', members='" . $VAL[4] . "', rank='" . $VAL[5] . "'";
			
			if (!DEBUG_MODE) {
				if (!$DB_R = $DB_C->query($DB_Q)) {
					die('There was an error running the query [' . $DB_C->error . ']');
				}
			}
		}
		
		$DB_C->close();
		$end_time = microtime(true);
		$EX_TIME = sprintf("%05.2f", round($end_time - $start_time, 2));
		print("Processing  Alliances         ...Done! [$EX_TIME]\n");
	}
	
	function Towns() {
		print("Processing  Towns\r");
		
		$start_time = microtime(true);
		$data_url = "http://" . WORLD_IDENTIFIER . ".grepolis.com/data/towns.txt";
		
		if (USE_LOCAL_TOWNS) {
			$data_url = LOCAL_TOWNS;
		}
		
		$datafile = file($data_url);
		
		if(!is_array($datafile)) die("File could not be opened");
	
		$BUILT = array();
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		
		if (SCRIPT_AUTO_TRUNCATE) {
			$DB_C->query("TRUNCATE TABLE Towns;");
		}
		
		foreach($datafile as $datum) {
            list(
				$id, 
				$player_id, 
				$name, 
				$island_x, 
				$island_y, 
				$number_on_island, 
				$points
			) = explode(',', $datum);
			
			$id               = CheckClear($id);
			$player_id        = CheckClear($player_id);
			$name             = CheckClear($name);
			$island_x         = CheckClear($island_x);
			$island_y         = CheckClear($island_y);
			$ocean            = floor($island_x / 100) * 10 + floor($island_y / 100);
			$number_on_island = CheckClear($number_on_island);
			$points           = CheckClear($points);
			
			array_push($BUILT, array(
				$id,
				$player_id,
				$name,
				$ocean,
				$island_x,
				$island_y,
				$number_on_island,
				$points
			));
        }
		
		foreach ($BUILT as $VAL) {
			$DB_Q = "INSERT INTO Towns (id, player_id, name, ocean, island_x, island_y, number_on_island, points) VALUES('" . $VAL[0] . "', '" . $VAL[1] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "', '" .$VAL[6] . "', '" .$VAL[7] . "') ON DUPLICATE KEY UPDATE player_id='" . $VAL[1] . "', name='" . $VAL[2] . "', ocean='" . $VAL[3] . "', island_x='" . $VAL[4] . "', island_y='" . $VAL[5] . "', number_on_island='" . $VAL[6] . "', points='" . $VAL[7] . "'";
		
			//If player_id is 0 this town is a ghost
			if ($VAL[1] == 0) {
				$DB_Q = "INSERT INTO Ghosts (id, name, ocean, island_x, island_y, number_on_island, points) VALUES('" . $VAL[0] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "', '" .$VAL[6] . "', '" .$VAL[7] . "') ON DUPLICATE KEY UPDATE name='" . $VAL[2] . "', ocean='" . $VAL[3] . "', island_x='" . $VAL[4] . "', island_y='" . $VAL[5] . "', number_on_island='" . $VAL[6] . "', points='" . $VAL[7] . "'";
			}
			
			if (!DEBUG_MODE) {
				if (!$DB_R = $DB_C->query($DB_Q)) {
					die('There was an error running the query [' . $DB_C->error . ']');
				}
			}
		}
		
		$DB_C->close();
		$end_time = microtime(true);
		$EX_TIME = sprintf("%05.2f", round($end_time - $start_time, 2));
		print("Processing  Towns             ...Done! [$EX_TIME]\n");
	}
	
	function Islands() {
		print("Processing  Islands\r");
		
		$start_time = microtime(true);
		$data_url = "http://" . WORLD_IDENTIFIER . ".grepolis.com/data/islands.txt";
		
		if (USE_LOCAL_ISLANDS) {
			$data_url = LOCAL_ISLANDS;
		}
		
		$datafile = file($data_url);
		
		if(!is_array($datafile)) die("File could not be opened");
	
		$BUILT = array();
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		
		if (SCRIPT_AUTO_TRUNCATE) {
			$DB_C->query("TRUNCATE TABLE Islands;");
		}
		
		foreach($datafile as $datum) {
            list(
				$id, 
				$x, 
				$y, 
				$island_type, 
				$available_towns,
				$res_plus,
				$res_minus
			) = explode(',', $datum);
			
			$id               = CheckClear($id);
			$x                = CheckClear($x);
			$y                = CheckClear($y);
			$island_type      = CheckClear($island_type);
			$available_towns  = CheckClear($available_towns);
			$res_plus         = CheckClear($res_plus);
			$res_minus        = CheckClear($res_minus);
			
			array_push($BUILT, array(
				$id,
				$x,
				$y,
				$island_type,
				$available_towns,
				$res_plus,
				$res_minus
			));
        }
		
		foreach ($BUILT as $VAL) {
			$DB_Q = "INSERT INTO Islands (id, x, y, island_type, available_towns, res_plus, res_minus) VALUES('" . $VAL[0] . "', '" . $VAL[1] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "', '" .$VAL[6] . "') ON DUPLICATE KEY UPDATE x='" . $VAL[1] . "', y='" . $VAL[2] . "', island_type='" . $VAL[3] . "', available_towns='" . $VAL[4] . "', res_plus='" . $VAL[5] . "', res_minus='" . $VAL[6] . "'";
			
			if (!DEBUG_MODE) {
				if (!$DB_R = $DB_C->query($DB_Q)) {
					die('There was an error running the query [' . $DB_C->error . ']');
				}
			}
		}
		
		$DB_C->close();
		$end_time = microtime(true);
		$EX_TIME = sprintf("%05.2f", round($end_time - $start_time, 2));
		print("Processing  Islands           ...Done! [$EX_TIME]\n");
	}
	
	function Conquers() {
		print("Processing  Conquers\r");
		
		$start_time = microtime(true);
		$data_url = "http://" . WORLD_IDENTIFIER . ".grepolis.com/data/conquers.txt";
		
		if (USE_LOCAL_CONQUERS) {
			$data_url = LOCAL_CONQUERS;
		}
		
		$datafile = file($data_url);
		
		if(!is_array($datafile)) die("File could not be opened");
	
		$BUILT = array();
		$DB_C = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
		
		if (SCRIPT_AUTO_TRUNCATE) {
			$DB_C->query("TRUNCATE TABLE Conquers;");
		}
		
		foreach($datafile as $datum) {
            list(
				$town_id, 
				$time, 
				$new_player_id, 
				$old_player_id, 
				$new_ally_id, 
				$old_ally_id, 
				$town_points
			) = explode(',', $datum);
			
			$town_id       = CheckClear($town_id);
			$time          = CheckClear($time);
			$new_player_id = CheckClear($new_player_id);
			$old_player_id = CheckClear($old_player_id);
			$new_ally_id   = CheckClear($new_ally_id);
			$old_ally_id   = CheckClear($old_ally_id);
			$town_points   = CheckClear($town_points);
			
			array_push($BUILT, array(
				$town_id,
				$time,
				$new_player_id,
				$old_player_id,
				$new_ally_id,
				$old_ally_id,
				$town_points
			));
        }
		
		foreach ($BUILT as $VAL) {
			$DB_Q = "INSERT INTO Conquers (town_id, time, new_player_id, old_player_id, new_ally_id, old_ally_id, town_points) VALUES('" . $VAL[0] . "', '" . $VAL[1] . "', '" . $VAL[2] . "', '" . $VAL[3] . "', '" . $VAL[4] . "', '" .$VAL[5] . "', '" .$VAL[6] . "') ON DUPLICATE KEY UPDATE time='" . $VAL[1] . "', new_player_id='" . $VAL[2] . "', old_player_id='" . $VAL[3] . "', new_ally_id='" . $VAL[4] . "', old_ally_id='" . $VAL[5] . "', town_points='" . $VAL[6] . "'";
			
			if (!DEBUG_MODE) {
				if (!$DB_R = $DB_C->query($DB_Q)) {
					die('There was an error running the query [' . $DB_C->error . ']');
				}
			}
		}
		
		$DB_C->close();
		$end_time = microtime(true);
		$EX_TIME = sprintf("%05.2f", round($end_time - $start_time, 2));
		print("Processing  Conquers          ...Done! [$EX_TIME]\n");
	}
?>