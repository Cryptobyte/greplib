<?php
    /*
	 * Developer   : H4x0
	 * Script Name : GrepLib
	 * Licence     : Public Domain
	 * Source      : http://crypt.noip.me
	 * 
	 * If you use this software in your project I would appreciate a 
	 * link back to my blog (the "Source" url) in the source somewhere, 
	 * it helps encourage me to develop more stuff.
	 *
	 * If you like this script, let me know on my blog! I am always open 
	 * to reviews, criticism (good or bad), and suggestions.
	 *
	 * This script is designed to pull data from the Grepolis API
	 * which stores its public data as text files as described on the 
	 * Grepolis Forum http://goo.gl/kakIEM it then organizes that data 
	 * into a 2-dimension PHP array() and inserts it into a database.
	 *
	 * This is designed to be run via command line or Cron job.
	 */
	require_once("Greplib.Settings");
	require_once("Greplib.Process");
	require_once("Greplib.Download");
	require_once("Greplib.Functions");

	if ((isset($argv)) && (count($argv) > 1)) {
		if ($argv[1] == "--version") {
			print(SCRIPT_VERSION . "\n");
			exit();
		}
	
		if ($argv[1] == "--update") {
			if(count($argv) > 2) {
				if ($argv[2] == "get") {
					print("Downloading all files...\n");
					Download_All();
					print("\nTimestamp   " . date(SCRIPT_DATE_FORMAT) . "\n");
					exit();
				}
			
				if ($argv[2] == "set") {
					print("Processing  all files...\n");
					Process_All();
					print("\nTimestamp   " . date(SCRIPT_DATE_FORMAT) . "\n");
					exit();
				}
			}
			
			print("Downloading all files...\n");
			Download_All();
			print("\nProcessing  all files...\n");
			Process_All();
			print("\nTimestamp   " . date(SCRIPT_DATE_FORMAT) . "\n");
			exit();
		}
	
		if (($argv[1] == "--test") && (count($argv) > 2)) {
			if ($argv[2] == "database") {
				$DB_CON = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);

				if ($DB_CON->connect_errno) {
					print("Database connection failed.\n");
					exit();
				}
				
				$DB_CON->close();
				print("Database connection successful.\n");
				exit();
			}
			
			if ($argv[2] == "files") {
				if (!file_exists(LOCAL_PLAYERS)) {
					print("File " . LOCAL_PLAYERS . " does not exist\n");
					exit();
				}
				
				if (!file_exists(LOCAL_ALLIANCES)) {
					print("File " . LOCAL_PLAYERS . " does not exist\n");
					exit();
				}
				
				if (!file_exists(LOCAL_TOWNS)) {
					print("File " . LOCAL_PLAYERS . " does not exist\n");
					exit();
				}
				
				if (!file_exists(LOCAL_ISLANDS)) {
					print("File " . LOCAL_PLAYERS . " does not exist\n");
					exit();
				}
				
				if (!file_exists(LOCAL_CONQUERS)) {
					print("File " . LOCAL_PLAYERS . " does not exist\n");
					exit();
				}
				
				print("File test was successful\n");
				exit();
			}
		}
	}
	
	print(sprintf("%-70s",  "Greplib by H4x0") . "\n");
	print(sprintf("%-70s",  " ") . "\n");
	print(sprintf("%-70s", "--update        | Download and update all data") . "\n");
	print(sprintf("%-70s", "--update get    | Download data files from Grepolis") . "\n");
	print(sprintf("%-70s", "--update set    | Process all data files into the database") . "\n");
	print(sprintf("%-70s",  " ") . "\n");
	print(sprintf("%-70s", "--test database | Tests database connection") . "\n");
	print(sprintf("%-70s", "--test files    | Checks global variable file names to see if they exist") . "\n");
	print(sprintf("%-70s",  " ") . "\n");
	print(sprintf("%-70s", "--version       | Prints the script version") . "\n");
?>